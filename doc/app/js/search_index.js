var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","connectedrouter","connectedsubnet","donabe","containercontroller","containerscontroller","flavor","image","loginscontroller","networkdesign","networkdesignscontroller","openstack","flavorscontroller","imagescontroller","networkscontroller","portscontroller","routergatewayscontroller","routerinterfacescontroller","routerscontroller","serverscontroller","subnetscontroller","volumescontroller","router","storage","subnet","type","visualisationscontroller","vm","action()","attach_volume()","build_headers()","build_http()","check_login()","cinder()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","current()","delete_request()","deploy()","deployhelper()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","detach_volume()","edit()","error_respond()","get_data()","get_request()","glance()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","init()","json_respond()","logged_in?()","login_failed()","move_port()","new()","nova()","post_request()","put_request()","quantum()","quotas()","remove_store()","require_login()","services()","show()","show()","show()","show()","show()","show()","store()","store_services()","switch()","tenants()","timeout()","update()","update()","update()","updatevms()","readme_for_app"],"longSearchIndex":["applicationcontroller","applicationhelper","connectedrouter","connectedsubnet","donabe","donabe::containercontroller","donabe::containerscontroller","flavor","image","loginscontroller","networkdesign","networkdesignscontroller","openstack","openstack::flavorscontroller","openstack::imagescontroller","openstack::networkscontroller","openstack::portscontroller","openstack::routergatewayscontroller","openstack::routerinterfacescontroller","openstack::routerscontroller","openstack::serverscontroller","openstack::subnetscontroller","openstack::volumescontroller","router","storage","subnet","type","visualisationscontroller","vm","openstack::serverscontroller#action()","openstack::serverscontroller#attach_volume()","applicationcontroller#build_headers()","applicationcontroller#build_http()","loginscontroller#check_login()","applicationcontroller#cinder()","donabe::containercontroller#create()","donabe::containerscontroller#create()","loginscontroller#create()","networkdesignscontroller#create()","openstack::imagescontroller#create()","openstack::networkscontroller#create()","openstack::portscontroller#create()","openstack::routergatewayscontroller#create()","openstack::routerinterfacescontroller#create()","openstack::routerscontroller#create()","openstack::serverscontroller#create()","openstack::subnetscontroller#create()","loginscontroller#current()","applicationcontroller#delete_request()","networkdesignscontroller#deploy()","networkdesignscontroller#deployhelper()","donabe::containercontroller#destroy()","donabe::containerscontroller#destroy()","loginscontroller#destroy()","networkdesignscontroller#destroy()","openstack::imagescontroller#destroy()","openstack::networkscontroller#destroy()","openstack::portscontroller#destroy()","openstack::routergatewayscontroller#destroy()","openstack::routerinterfacescontroller#destroy()","openstack::routerscontroller#destroy()","openstack::serverscontroller#destroy()","openstack::subnetscontroller#destroy()","openstack::serverscontroller#detach_volume()","networkdesignscontroller#edit()","applicationcontroller#error_respond()","applicationcontroller#get_data()","applicationcontroller#get_request()","applicationcontroller#glance()","donabe::containercontroller#index()","donabe::containerscontroller#index()","networkdesignscontroller#index()","openstack::flavorscontroller#index()","openstack::imagescontroller#index()","openstack::networkscontroller#index()","openstack::portscontroller#index()","openstack::routerscontroller#index()","openstack::serverscontroller#index()","openstack::subnetscontroller#index()","openstack::volumescontroller#index()","networkdesign#init()","applicationcontroller#json_respond()","applicationcontroller#logged_in?()","loginscontroller#login_failed()","openstack::portscontroller#move_port()","networkdesignscontroller#new()","applicationcontroller#nova()","applicationcontroller#post_request()","applicationcontroller#put_request()","applicationcontroller#quantum()","openstack::serverscontroller#quotas()","applicationcontroller#remove_store()","visualisationscontroller#require_login()","loginscontroller#services()","loginscontroller#show()","networkdesignscontroller#show()","openstack::networkscontroller#show()","openstack::routerscontroller#show()","openstack::serverscontroller#show()","visualisationscontroller#show()","applicationcontroller#store()","loginscontroller#store_services()","loginscontroller#switch()","loginscontroller#tenants()","loginscontroller#timeout()","donabe::containercontroller#update()","donabe::containerscontroller#update()","networkdesignscontroller#update()","networkdesignscontroller#updatevms()",""],"info":[["ApplicationController","","ApplicationController.html","","<p>Application controller, parent class to all other controllers, provides all\nmethods which are used in …\n"],["ApplicationHelper","","ApplicationHelper.html","",""],["ConnectedRouter","","ConnectedRouter.html","",""],["ConnectedSubnet","","ConnectedSubnet.html","",""],["Donabe","","Donabe.html","",""],["Donabe::ContainerController","","Donabe/ContainerController.html","",""],["Donabe::ContainersController","","Donabe/ContainersController.html","",""],["Flavor","","Flavor.html","",""],["Image","","Image.html","",""],["LoginsController","","LoginsController.html","","<p>docs.openstack.org/api/openstack-identity-service/2.0/content/\n"],["NetworkDesign","","NetworkDesign.html","",""],["NetworkDesignsController","","NetworkDesignsController.html","",""],["Openstack","","Openstack.html","","<p>Modules to contain all the openstack related controllers\n"],["Openstack::FlavorsController","","Openstack/FlavorsController.html","",""],["Openstack::ImagesController","","Openstack/ImagesController.html","","<p>Controller to manage curvatures access to the images stored on openstack\n"],["Openstack::NetworksController","","Openstack/NetworksController.html","","<p>Networks Controller\n"],["Openstack::PortsController","","Openstack/PortsController.html","",""],["Openstack::RouterGatewaysController","","Openstack/RouterGatewaysController.html","",""],["Openstack::RouterInterfacesController","","Openstack/RouterInterfacesController.html","",""],["Openstack::RoutersController","","Openstack/RoutersController.html","",""],["Openstack::ServersController","","Openstack/ServersController.html","",""],["Openstack::SubnetsController","","Openstack/SubnetsController.html","",""],["Openstack::VolumesController","","Openstack/VolumesController.html","",""],["Router","","Router.html","",""],["Storage","","Storage.html","",""],["Subnet","","Subnet.html","",""],["Type","","Type.html","",""],["VisualisationsController","","VisualisationsController.html","",""],["Vm","","Vm.html","",""],["action","Openstack::ServersController","Openstack/ServersController.html#method-i-action","()",""],["attach_volume","Openstack::ServersController","Openstack/ServersController.html#method-i-attach_volume","()",""],["build_headers","ApplicationController","ApplicationController.html#method-i-build_headers","(token)","<p>Build the headers required to make a rest request, specifiying content type\nand including the users token …\n"],["build_http","ApplicationController","ApplicationController.html#method-i-build_http","(uri)","<p>Build a http request using the URI specified, sets the timeout of the \noperation to 10 seconds for both …\n"],["check_login","LoginsController","LoginsController.html#method-i-check_login","()",""],["cinder","ApplicationController","ApplicationController.html#method-i-cinder","()","<p>Returns a Ropenstack cinder object created with the users token and stored\ncinder ip address\n"],["create","Donabe::ContainerController","Donabe/ContainerController.html#method-i-create","()","<p>Deploy a container\n"],["create","Donabe::ContainersController","Donabe/ContainersController.html#method-i-create","()","<p>Create a new container\n"],["create","LoginsController","LoginsController.html#method-i-create","()","<p>Attempt login, store cookie,\n"],["create","NetworkDesignsController","NetworkDesignsController.html#method-i-create","()","<p>POST /network_designs POST /network_designs.json\n"],["create","Openstack::ImagesController","Openstack/ImagesController.html#method-i-create","()","<p>POST /openstack/images Create a new image using a file provided by the user\nmaking the request\n"],["create","Openstack::NetworksController","Openstack/NetworksController.html#method-i-create","()",""],["create","Openstack::PortsController","Openstack/PortsController.html#method-i-create","()",""],["create","Openstack::RouterGatewaysController","Openstack/RouterGatewaysController.html#method-i-create","()",""],["create","Openstack::RouterInterfacesController","Openstack/RouterInterfacesController.html#method-i-create","()",""],["create","Openstack::RoutersController","Openstack/RoutersController.html#method-i-create","()",""],["create","Openstack::ServersController","Openstack/ServersController.html#method-i-create","()",""],["create","Openstack::SubnetsController","Openstack/SubnetsController.html#method-i-create","()",""],["current","LoginsController","LoginsController.html#method-i-current","()",""],["delete_request","ApplicationController","ApplicationController.html#method-i-delete_request","(uri)","<p>Delete request wrapper function returns a HTTPResponse object\n"],["deploy","NetworkDesignsController","NetworkDesignsController.html#method-i-deploy","()","<p>POST /network_designs/deploy/1 POST /network_designs/deploy/1.json\n"],["deployHelper","NetworkDesignsController","NetworkDesignsController.html#method-i-deployHelper","(id,network,embedded)",""],["destroy","Donabe::ContainerController","Donabe/ContainerController.html#method-i-destroy","()","<p>Undeploy a running container\n"],["destroy","Donabe::ContainersController","Donabe/ContainersController.html#method-i-destroy","()","<p>Delete a container\n"],["destroy","LoginsController","LoginsController.html#method-i-destroy","()","<p>Logout/destroy tokens\n"],["destroy","NetworkDesignsController","NetworkDesignsController.html#method-i-destroy","()","<p>DELETE /network_designs/1 DELETE /network_designs/1.json\n"],["destroy","Openstack::ImagesController","Openstack/ImagesController.html#method-i-destroy","()","<p>DELETE /openstack/images/:id  Delete an image given an id\n"],["destroy","Openstack::NetworksController","Openstack/NetworksController.html#method-i-destroy","()",""],["destroy","Openstack::PortsController","Openstack/PortsController.html#method-i-destroy","()",""],["destroy","Openstack::RouterGatewaysController","Openstack/RouterGatewaysController.html#method-i-destroy","()",""],["destroy","Openstack::RouterInterfacesController","Openstack/RouterInterfacesController.html#method-i-destroy","()",""],["destroy","Openstack::RoutersController","Openstack/RoutersController.html#method-i-destroy","()",""],["destroy","Openstack::ServersController","Openstack/ServersController.html#method-i-destroy","()",""],["destroy","Openstack::SubnetsController","Openstack/SubnetsController.html#method-i-destroy","()",""],["detach_volume","Openstack::ServersController","Openstack/ServersController.html#method-i-detach_volume","()",""],["edit","NetworkDesignsController","NetworkDesignsController.html#method-i-edit","()","<p>GET /network_designs/edit GET /network_designs/edit.json\n"],["error_respond","ApplicationController","ApplicationController.html#method-i-error_respond","(exception)","<p>Manages the errors caught by the resuce_from Ropenstack::RopenstackError\nCatches the type of error it …\n"],["get_data","ApplicationController","ApplicationController.html#method-i-get_data","(key)","<p>A utility function for getting the data out from the storages table using\nthe id  stored in the cookie. …\n"],["get_request","ApplicationController","ApplicationController.html#method-i-get_request","(uri, token)","<p>Get request wrapper function returns a HTTPResponse object\n"],["glance","ApplicationController","ApplicationController.html#method-i-glance","()","<p>Returns a Ropenstack glance object created with the users token and stored\nglace ip address\n"],["index","Donabe::ContainerController","Donabe/ContainerController.html#method-i-index","()","<p>Get all deployed containers\n"],["index","Donabe::ContainersController","Donabe/ContainersController.html#method-i-index","()","<p>Get a all containers\n"],["index","NetworkDesignsController","NetworkDesignsController.html#method-i-index","()","<p>GET /network_designs GET /network_designs.json\n"],["index","Openstack::FlavorsController","Openstack/FlavorsController.html#method-i-index","()","<p>GET /openstack/flavors Returns all the flavors from openstack\n"],["index","Openstack::ImagesController","Openstack/ImagesController.html#method-i-index","()","<p>GET /openstack/images Returns all the images accessible to the tenant\nmaking the request\n"],["index","Openstack::NetworksController","Openstack/NetworksController.html#method-i-index","()",""],["index","Openstack::PortsController","Openstack/PortsController.html#method-i-index","()",""],["index","Openstack::RoutersController","Openstack/RoutersController.html#method-i-index","()",""],["index","Openstack::ServersController","Openstack/ServersController.html#method-i-index","()",""],["index","Openstack::SubnetsController","Openstack/SubnetsController.html#method-i-index","()",""],["index","Openstack::VolumesController","Openstack/VolumesController.html#method-i-index","()",""],["init","NetworkDesign","NetworkDesign.html#method-i-init","()",""],["json_respond","ApplicationController","ApplicationController.html#method-i-json_respond","(list)","<p>A simple helper function which provides the ‘respond_to do’ for a list to\nbe returned in the json format. …\n"],["logged_in?","ApplicationController","ApplicationController.html#method-i-logged_in-3F","()","<p>Returns true or false only based on if the user is logged in or not\n"],["login_failed","LoginsController","LoginsController.html#method-i-login_failed","()",""],["move_port","Openstack::PortsController","Openstack/PortsController.html#method-i-move_port","()",""],["new","NetworkDesignsController","NetworkDesignsController.html#method-i-new","()","<p>GET /network_designs/new GET /network_designs/new.json\n"],["nova","ApplicationController","ApplicationController.html#method-i-nova","()","<p>Returns a Ropenstack nova object created with the users token and stored\nnova ip address\n"],["post_request","ApplicationController","ApplicationController.html#method-i-post_request","(uri, body)","<p>Post request wrapper function returns a HTTPResponse object\n"],["put_request","ApplicationController","ApplicationController.html#method-i-put_request","(uri, body)","<p>Put request wrapper function returns a HTTPResponse object\n"],["quantum","ApplicationController","ApplicationController.html#method-i-quantum","()","<p>Returns a Ropenstack quantum object created with the users token and stored\nquantum ip address\n"],["quotas","Openstack::ServersController","Openstack/ServersController.html#method-i-quotas","()",""],["remove_store","ApplicationController","ApplicationController.html#method-i-remove_store","(key, value)","<p>Removed a peice of data stored in the cookie object and removes it from the\nStorages model\n"],["require_login","VisualisationsController","VisualisationsController.html#method-i-require_login","()",""],["services","LoginsController","LoginsController.html#method-i-services","()",""],["show","LoginsController","LoginsController.html#method-i-show","()",""],["show","NetworkDesignsController","NetworkDesignsController.html#method-i-show","()","<p>GET /network_design GET /network_design.json\n"],["show","Openstack::NetworksController","Openstack/NetworksController.html#method-i-show","()",""],["show","Openstack::RoutersController","Openstack/RoutersController.html#method-i-show","()",""],["show","Openstack::ServersController","Openstack/ServersController.html#method-i-show","()",""],["show","VisualisationsController","VisualisationsController.html#method-i-show","()",""],["store","ApplicationController","ApplicationController.html#method-i-store","(key, data)","<p>Places data into the Storages table and places the id for that peice of\ndata into the cookie with the …\n"],["store_services","LoginsController","LoginsController.html#method-i-store_services","(services, admin)",""],["switch","LoginsController","LoginsController.html#method-i-switch","()","<p>Reauthenticate and set new scoped token\n"],["tenants","LoginsController","LoginsController.html#method-i-tenants","()","<p>Used to fill out tenant switching bar in interface.\n"],["timeout","LoginsController","LoginsController.html#method-i-timeout","()",""],["update","Donabe::ContainerController","Donabe/ContainerController.html#method-i-update","()","<p>Modifiy a currently running container\n"],["update","Donabe::ContainersController","Donabe/ContainersController.html#method-i-update","()","<p>Update a container\n"],["update","NetworkDesignsController","NetworkDesignsController.html#method-i-update","()","<p>PUT /network_designs/1 PUT /network_designs/1.json\n"],["updateVMs","NetworkDesignsController","NetworkDesignsController.html#method-i-updateVMs","(params)",""],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}